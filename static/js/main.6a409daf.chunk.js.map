{"version":3,"sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/FeedBackOptions/FeedBackOptions.styled.js","components/FeedBackOptions/FeedBackOptions.jsx","components/Notification/Notification.jsx","components/App.js","index.js"],"names":["Title","styled","h3","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Buttons","button","FeedbackOptions","options","updateState","map","option","type","onClick","Notification","message","Feedback","useState","setGood","setBad","setNeutral","countTotalFeedback","Object","keys","isOpenStatisticsDate","feedback","state","console","log","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PACaA,EAAQC,IAAOC,GAAV,+G,OCiBHC,EAfC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,cAACL,EAAD,UAAQI,IACPC,MCeQC,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,SCPhBC,EAAUX,IAAOY,OAAV,qPCCL,SAASC,EAAT,GAAoD,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,YACjD,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,cAACN,EAAD,CAASO,KAAK,SAAsBC,QAAS,kBAAMJ,EAAYE,IAA/D,SACGA,GADyBA,MCFhC,IAQeG,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,cAACtB,EAAD,UAAQsB,KCGF,SAASC,IAExB,MAAwBC,mBAAS,GAAjC,mBAAOjB,EAAP,KAAakB,EAAb,KACA,EAAsBD,mBAAS,GAA/B,mBAAOf,EAAP,KAAYiB,EAAZ,KACA,EAA8BF,mBAAS,GAAvC,mBAAOhB,EAAP,KAAgBmB,EAAhB,KAkBQC,EAAqB,WACzB,OAAOrB,EAAOC,EAAUC,GAOpBM,EAAUc,OAAOC,KAAK,CAAEvB,OAAMC,UAASC,QAEvCsB,EAAqBH,IAAqB,EAEhD,OACI,gCACE,cAAC,EAAD,CAASxB,MAAM,wBAAf,SACE,cAACU,EAAD,CAAiBC,QAASA,EAASC,YA/BrB,SAAAgB,GACpB,OAAQA,GACN,IAAK,OACHP,GAAQ,SAAAQ,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHN,GAAW,SAAAM,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHP,GAAO,SAAAO,GAAK,OAAIA,EAAQ,KACxB,MACF,QACEC,QAAQC,IAAI,eAsBZ,eAAC,EAAD,CAAS/B,MAAM,aAAf,UACC2B,GACC,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,IACPjB,mBApBF,GAAN,OAAUyB,KAAKC,MAAO9B,EAAOqB,IAAwB,KAArD,QAwBMG,GAAwB,cAAC,EAAD,CAAcT,QAAQ,4BCrDxDgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6a409daf.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\nexport const Title = styled.h3`\r\n  font-size: 16px;\r\n\r\n  color: green;\r\n  font-weight: bold;\r\n  margin-left: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Title } from './Section.styled';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  //children: PropTypes.arrayOf(PropTypes.element),\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types'; // shortcut: impt\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Buttons = styled.button`\r\n  padding: 10px;\r\n  margin-left: 15px;\r\n  background-color: green;\r\n  font-size: 16px;\r\n  border-radius: 15px;\r\n  color: white;\r\n  font-weight: bold;\r\n  &:hover {\r\n    color: grey;\r\n    background-color: white;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Buttons } from './FeedBackOptions.styled';\r\n\r\nexport default function FeedbackOptions({ options, updateState }) {\r\n  return options.map(option => (\r\n    <Buttons type=\"button\" key={option} onClick={() => updateState(option)}>\r\n      {option}\r\n    </Buttons>\r\n  ));\r\n}\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  updateState: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { Title } from '../Section/Section.styled';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <Title>{message}</Title>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, {useState} from 'react';\r\n\r\nimport Section from './Section/Section.jsx';\r\nimport Statistics from './Statistics/Statistics';\r\nimport FeedbackOptions from './FeedBackOptions/FeedBackOptions';\r\nimport Notification from './Notification/Notification';\r\n\r\nexport default function Feedback() {\r\n\r\nconst [good, setGood] = useState(0);\r\nconst [bad, setBad] = useState(0);\r\nconst [neutral, setNeutral] = useState(0);\r\n\r\nconst handleIncrement = feedback => {\r\n    switch (feedback) {\r\n      case 'good':\r\n        setGood(state => state + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(state => state + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(state => state + 1);\r\n        break;\r\n      default:\r\n        console.log('Ooops');\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return `${Math.floor((good / countTotalFeedback()) * 100)}%`;\r\n  };\r\n\r\n  const options = Object.keys({ good, neutral, bad });\r\n\r\n  const isOpenStatisticsDate=countTotalFeedback()>0\r\n\r\n  return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={options} updateState={handleIncrement} />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n        {isOpenStatisticsDate && (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n        \r\n        {!isOpenStatisticsDate && <Notification message=\"No feedback given\" />}\r\n        </Section>\r\n      </div>\r\n    );\r\n\r\n}\r\n/*export default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good } = this.state;\r\n    return `${Math.floor((good / this.countTotalFeedback()) * 100)}%`;\r\n  };\r\n\r\n  updateState = option => {\r\n    this.setState(prevState => {\r\n      return { [option]: prevState[option] + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const options = Object.keys(this.state);\r\n\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={options} updateState={this.updateState} />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}